{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","stateMachine","initial","states","on","next","loadingModel","awaitingUpload","ready","showImage","classifying","complete","showResults","tf","useReducer","currentState","event","state","dispatch","useState","model","setModel","imageUrl","setImageUrl","results","setResults","showMap","setShowMap","changeClass","setClass","inputRef","useRef","imageRef","usePalette","data","loading","error","reset","buttonProps","text","action","a","mobilenet","mobilenetModel","current","click","classify","classificationResults","console","log","className","style","backgroundColor","darkVibrant","CSSTransition","in","timeout","classNames","unmountOnExit","alt","src","ref","onEnter","onExited","vibrant","map","result","index","key","Math","round","probability","id","type","accept","capture","onChange","e","files","target","length","url","URL","createObjectURL","onClick","Boolean","window","location","hostname","match","ReactDOM","render","Fragment","document","getElementById","navigator","serviceWorker","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.f3f939a8.chunk.js","sourcesContent":["import React, { useReducer, useState, useRef } from 'react';\nimport * as tf from '@tensorflow/tfjs' \nimport * as mobilenet from '@tensorflow-models/mobilenet'\nimport './App.css';\nimport CSSTransition from \"react-transition-group/CSSTransition\"\nimport { usePalette } from 'react-palette';\n\n\n\n\nexport function App() {\n  \nconst stateMachine = {\n  initial: 'initial',\n  states: {\n    initial: {on: {next: 'loadingModel'}},\n    loadingModel: {on: {next: 'awaitingUpload'}},\n    awaitingUpload: {on: {next: 'ready'}},\n    ready: {on: {next: 'classifying'}, showImage: true},\n    classifying: {on: {next: 'complete'}, showImage: true},\n    complete: {on: {next: 'awaitingUpload'}, showImage:true, showResults: true}\n    \n  }\n}\nconst reducer = (currentState, event) => stateMachine.states[currentState].on[event] || stateMachine.initial;\n\n  tf.setBackend(\"cpu\")\nconst [state, dispatch] = useReducer(reducer, stateMachine.initial)\nconst [model, setModel] = useState(null)\nconst [imageUrl, setImageUrl] = useState(null)\nconst [results, setResults] = useState(null)\nconst [showMap, setShowMap] = useState(null)\nconst [changeClass, setClass] = useState('img-container')\nconst inputRef = useRef()\nconst imageRef = useRef()\nconst {data, loading, error}= usePalette(imageUrl)\nconst next = ()=>dispatch('next')\n\n\n\nconst loadModel = async () => {\n  next()\n  const mobilenetModel = await mobilenet.load()\n  setModel(mobilenetModel)\n  next()\n}\n\nconst handleUpload = e =>{\n  const {files} = e.target;\n  if(files.length > 0){\n    const url = URL.createObjectURL(files[0])\n    setImageUrl(url)\n    setClass('img-container')\n    next()\n  }\n}\n\nconst identify = async() => {\n  setClass('upper-img-container')\n  next()\n  const classificationResults = await model.classify(imageRef.current)\n  setResults(classificationResults)\n \n  next()\n  \n}\nconst reset = () => {\n  setShowMap(false)\n  setImageUrl(null)\n  setResults([])\n  next()\n }\n  \n\n\nconst buttonProps = {\n  initial: {text:'Load Model', action:loadModel},\n  loadingModel: {text: 'Loading Model...', action:()=>{}},\n  awaitingUpload: {text: 'Upload Photo', action:()=> inputRef.current.click()},\n  ready: {text: 'Identify', action:identify},\n  classifying: {text: 'Identifying', action:()=>{}},\n  complete: {text: 'Reset', action:next}\n \n  \n}\nconst {showImage = false, showResults = false} = stateMachine.states[state]\n\n\nconsole.log(data)\nreturn (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div style={{backgroundColor:`${data.darkVibrant}`}} className=\"background\"></div>\n      <CSSTransition\n         in={!showImage}\n         timeout={1000}\n         classNames=\"fade\"\n         unmountOnExit>\n           <div className=\"text-box\">\n           <h1>Image Classification</h1>\n           <h4>This application uses a tensorflow model for classifing your uploaded image.\n             The model will provide three objects which have the highest probability to be the object in the image.<br/><br/>\n              Give it a shot!\n           </h4>\n           </div>\n         </CSSTransition>\n\n         <CSSTransition\n         in={showImage}\n         timeout={1000}\n         classNames=\"fade\"\n         unmountOnExit>\n         <div className={changeClass}>\n            <img alt=\"\" src={imageUrl} ref={imageRef}/>\n            </div>\n            </CSSTransition>\n\n  <CSSTransition\n   in={showResults}\n   timeout={1000}\n   classNames=\"fade\"\n   unmountOnExit\n   onEnter={() => setShowMap(true)}\n   onExited={() => reset}>\n  <table>\n    <tbody>\n  <tr>\n    <th style={{backgroundColor:`${data.vibrant}`}}>Object</th>\n    <th style={{backgroundColor:`${data.vibrant}`}}>Probability</th>\n  </tr>\n  \n  {showMap && results.map((result,index) =>\n  \n \n  <tr key={index}> <td>{result.className}</td> \n  <td>{Math.round(result.probability * 100)}%</td></tr>)}\n \n  </tbody>\n  </table>\n  </CSSTransition>\n \n\n        <input id=\"input\" type=\"file\" accept=\"image/*\" capture=\"camera\" ref={inputRef} onChange={handleUpload}/>\n    \n  <button style={data?{backgroundColor:`${data.darkVibrant}`}:{backgroundColor:\"#3fd496\"}} onClick={buttonProps[state].action}>{buttonProps[state].text}</button>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.Fragment>\n    <App />\n  </React.Fragment>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}